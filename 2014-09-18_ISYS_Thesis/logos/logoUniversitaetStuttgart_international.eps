%!PS-Adobe-3.0 EPSF-3.0
%%Title: (LOGO2_NEU.eps)
%%Version: 1 4
%%Creator: Adobe Acrobat 7.0
%%CreationDate: 15:36:16 06/24/10
%%For: (G5 ac.cent)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%ADO_ContainsXMP: MainFirst
%%BoundingBox: 0 0 2243 477
%%HiResBoundingBox: 0.0 0.0 2242.73 476.789
%%Pages: 0
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources:
%%+ procset (Adobe Acrobat - PDF operators) 1.2 0
%%EndComments
%%BeginProlog
%%EndProlog
%%BeginSetup
%ADOPrintSettings: L2 W0 VM op crd os scsa T h ef bg ucr sf ef r b fa pr seps ttf hb EF t2 irt Drucker-/PostScript-Farbmanagement 0
%%BeginResource: procset l2check 6.0 1
%%Copyright: Copyright 1993,2001 Adobe Systems Incorporated. All Rights Reserved.
systemdict /languagelevel known
{ systemdict /languagelevel get 1 eq }
{ true }
ifelse
{
initgraphics /Helvetica findfont 18 scalefont setfont
72 600 moveto (Error: This application does not support) dup show
72 580 moveto (printing to a PostScript Language Level 1 printer.) dup show
exch = =
/Times-Roman findfont 16 scalefont setfont
72 500 moveto (As a workaround, try selecting Print As Image from) show
72 480 moveto (the Advanced Print dialog.) show
showpage
quit
}
if
%%EndResource
/currentpacking where{pop currentpacking true setpacking}if
%%BeginResource: procset pdfvars 6.0 1
%%Copyright: Copyright 1987-2002 Adobe Systems Incorporated. All Rights Reserved.
%%Title: definition of dictionary of variables used by PDF & PDFText procsets
userdict /PDF 162 dict put
userdict /PDFVars 89 dict dup begin put
/docSetupDone false def
/InitAll 0 def
/TermAll 0 def
/DocInitAll 0 def
/DocTermAll 0 def
/_pdfEncodings 2 array def
/_pdf_str1 1 string def
/_pdf_i 0 def
/_pdf_na 0 def
/_pdf_showproc 0 def
/_italMtx [1 0 .212557 1 0 0] def
/_italMtx_WMode1 [1 -.212557 0 1 0 0] def
/_italMtxType0 [1 0 .1062785 1 0 0] def
/_italMtx_WMode1Type0 [1 -.1062785 0 1 0 0] def
/_basefont 0 def
/_basefonto 0 def
/_pdf_oldCIDInit null def
/_pdf_FontDirectory 30 dict def
/_categories 10 dict def
/_sa? true def
/_ColorSep5044? false def
/nulldict 0 dict def
/_processColors 0 def
/overprintstack null def
/_defaulttransfer currenttransfer def
/_defaultflatness currentflat def
/_defaulthalftone null def
/_defaultcolortransfer null def
/_defaultblackgeneration null def
/_defaultundercolorremoval null def
/_defaultcolortransfer null def
PDF begin
[/c/cs/cm/d/d0/f/h/i/j/J/l/m/M/n/q/Q/re/ri/S/sc/sh/Tf/w/W
/applyInterpFunc/applystitchFunc/domainClip/encodeInput
/initgs/int/limit/rangeClip
/defineRes/undefineRes/findRes/setSA/pl
/? /! /| /: /+ /GetGlyphDirectory
/pdf_flushFilters /pdf_readstring /pdf_dictOp /pdf_image /pdf_maskedImage
/pdf_shfill /pdf_sethalftone
] {null def} bind forall
end
end
%%EndResource
PDFVars begin PDF begin
%%BeginResource: procset pdfutil 6.0 1
%%Copyright: Copyright 1993-2001 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Basic utilities used by other PDF procsets
/bd {bind def} bind def
/ld {load def} bd
/bld {
dup length dict begin
{ null def } forall
bind
end
def
} bd
/dd { PDFVars 3 1 roll put } bd
/xdd { exch dd } bd
/Level2?
systemdict /languagelevel known
{ systemdict /languagelevel get 2 ge } { false } ifelse
def
/Level1? Level2? not def
/Level3?
systemdict /languagelevel known
{systemdict /languagelevel get 3 eq } { false } ifelse
def
/getifknown {
2 copy known { get true } { pop pop false } ifelse
} bd
/here {
currentdict exch getifknown
} bd
/isdefined? { where { pop true } { false } ifelse } bd
%%EndResource
%%BeginResource: procset pdf 6.0 1
%%Copyright: Copyright 1998-2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: General operators for PDF, common to all Language Levels.
/cm { matrix astore concat } bd
/d /setdash ld
/f /fill ld
/h /closepath ld
/i {dup 0 eq {pop _defaultflatness} if setflat} bd
/j /setlinejoin ld
/J /setlinecap ld
/M /setmiterlimit ld
/n /newpath ld
/S /stroke ld
/w /setlinewidth ld
/W /clip ld
/sg /setgray ld
/initgs {
0 setgray
[] 0 d
0 j
0 J
10 M
1 w
false setSA
/_defaulttransfer load settransfer
0 i
/RelativeColorimetric ri
newpath
} bd
/int {
dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul
exch pop add exch pop
} bd
/limit {
dup 2 index le { exch } if pop
dup 2 index ge { exch } if pop
} bd
/domainClip {
Domain aload pop 3 2 roll
limit
} [/Domain] bld
/applyInterpFunc {
0 1 DimOut 1 sub
{
dup C0 exch get exch
dup C1 exch get exch
3 1 roll
1 index sub
3 index
N exp mul add
exch
currentdict /Range_lo known
{
dup Range_lo exch get exch
Range_hi exch get
3 2 roll limit
}
{
pop
}
ifelse
exch
} for
pop
} [/DimOut /C0 /C1 /N /Range_lo /Range_hi] bld
/encodeInput {
NumParts 1 sub
0 1 2 index
{
dup Bounds exch get
2 index gt
{ exit }
{ dup
3 index eq
{ exit }
{ pop } ifelse
} ifelse
} for
3 2 roll pop
dup Bounds exch get exch
dup 1 add Bounds exch get exch
2 mul
dup Encode exch get exch
1 add Encode exch get
int
} [/NumParts /Bounds /Encode] bld
/rangeClip {
exch dup Range_lo exch get
exch Range_hi exch get
3 2 roll
limit
} [/Range_lo /Range_hi] bld
/applyStitchFunc {
Functions exch get exec
currentdict /Range_lo known {
0 1 DimOut 1 sub {
DimOut 1 add -1 roll
rangeClip
} for
} if
} [/Functions /Range_lo /DimOut] bld
/pdf_flushfilters
{
aload length
{ dup status
1 index currentfile ne and
{ dup flushfile closefile }
{ pop }
ifelse
} repeat
} bd
/pdf_readstring
{
1 index dup length 1 sub get
exch readstring pop
exch pdf_flushfilters
} bind def
/pdf_dictOp
{
3 2 roll
10 dict copy
begin
_Filters dup length 1 sub get def
currentdict exch exec
_Filters pdf_flushfilters
end
} [/_Filters] bld
/pdf_imagemask {{imagemask} /DataSource pdf_dictOp} bd
/pdf_shfill {{sh} /DataSource pdf_dictOp} bd
/pdf_sethalftone {{sethalftone} /Thresholds pdf_dictOp} bd
/masks [ 2#10000000
2#11000000
2#11100000
2#11110000
2#11111000
2#11111100
2#11111110
2#11111111 ] def
/addNBits
{
/numBits exch def
/byte exch def
OutBitOffset numBits add 8 gt
{
byte OutBitOffset 8 sub bitshift
OutBuffer OutByteIndex get or
OutBuffer OutByteIndex 3 -1 roll put
/OutByteIndex OutByteIndex 1 add def
/bitsDoneSoFar OutBitOffset def
/OutBitOffset numBits 8 OutBitOffset sub sub def
OutBitOffset 0 gt
{
byte bitsDoneSoFar bitshift
masks numBits bitsDoneSoFar sub get and
OutBuffer OutByteIndex 3 -1 roll put
} if
}
{
byte masks numBits 1 sub get and
OutBitOffset neg bitshift
OutBuffer OutByteIndex get or
OutBuffer OutByteIndex 3 -1 roll put
/OutBitOffset OutBitOffset numBits add def
OutBitOffset 8 eq
{
/OutBitOffset 0 def
/OutByteIndex OutByteIndex 1 add def
} if
} ifelse
} bind def
/DevNNFilter
{
/InBuffer Width NumComps mul BitsPerComponent mul 7 add 8 idiv string def
AllSource InBuffer readstring pop pop
/outlen Width NewNumComps mul BitsPerComponent mul 7 add 8 idiv def
/OutBuffer outlen string def
0 1 outlen 1 sub { OutBuffer exch 0 put } for
/InByteIndex 0 def
/InBitOffset 0 def
/OutByteIndex 0 def
/OutBitOffset 0 def
/KeepArray NumComps array def
0 1 NumComps 1 sub { KeepArray exch true put } for
DevNNones { KeepArray exch false put } forall
Width {
KeepArray
{
{
/bitsLeft BitsPerComponent def
{
bitsLeft 0 le { exit } if
/bitsToDo 8 InBitOffset sub dup bitsLeft gt { pop bitsLeft } if def
InBuffer InByteIndex get
InBitOffset bitshift
bitsToDo addNBits
/bitsLeft bitsLeft bitsToDo sub def
InBitOffset bitsToDo add
dup 8 mod /InBitOffset exch def
8 idiv InByteIndex add /InByteIndex exch def
} loop
}
{
InBitOffset BitsPerComponent add
dup 8 mod /InBitOffset exch def
8 idiv InByteIndex add /InByteIndex exch def
}
ifelse
}
forall
} repeat
OutBuffer
} bd
/pdf_image
{
20 dict copy
begin
/UnusedNones where { /UnusedNones get}{false} ifelse
{
/NumComps Decode length 2 div cvi def
/OrigDecode Decode def
/NumNones DevNNones length def
/NewNumComps NumComps NumNones sub def
/Decode NewNumComps 2 mul cvi array def
/devNNindx 0 def
/decIndx 0 def
/cmpIndx 0 def
NumComps {
cmpIndx DevNNones devNNindx get eq
{
/devNNindx devNNindx 1 add dup NumNones eq {pop 0} if def
}
{
Decode decIndx OrigDecode cmpIndx 2 mul get put
Decode decIndx 1 add OrigDecode cmpIndx 2 mul 1 add get put
/decIndx decIndx 2 add def
} ifelse
/cmpIndx cmpIndx 1 add def
} repeat
_Filters dup length 1 sub get /AllSource exch def
/DataSource { DevNNFilter } def
}
{ _Filters dup length 1 sub get /DataSource exch def }
ifelse
currentdict image
_Filters pdf_flushfilters
end
} bd
/pdf_maskedImage
{
10 dict copy begin
/miDict currentdict def
/DataDict DataDict 10 dict copy def
DataDict begin
/DataSource
_Filters dup length 1 sub get
def
miDict image
_Filters pdf_flushfilters
end
miDict /InterleaveType get 3 eq
{ MaskDict /DataSource get dup type /filetype eq { closefile } { pop } ifelse }
if
end
} [/miDict /DataDict /_Filters] bld
/RadialShade {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/r2 exch def
/c2y exch def
/c2x exch def
/r1 exch def
/c1y exch def
/c1x exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
c1x c2x eq
{
c1y c2y lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope c2y c1y sub c2x c1x sub div def
/theta slope 1 atan def
c2x c1x lt c2y c1y ge and { /theta theta 180 sub def} if
c2x c1x lt c2y c1y lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
c1x c1y translate
theta rotate
-90 rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
/max { 2 copy gt { pop } {exch pop} ifelse } bind def
/min { 2 copy lt { pop } {exch pop} ifelse } bind def
rampdict begin
40 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
c1x c1y translate
theta rotate
-90 rotate
/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
/c1y 0 def
/c1x 0 def
/c2x 0 def
ext0 {
0 getrampcolor
c2y r2 add r1 sub 0.0001 lt
{
c1x c1y r1 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2y r1 add r2 le
{
c1x c1y r1 0 360 arc
fill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r1 neg def
/p1y c1y def
/p2x r1 def
/p2y c1y def
p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y p1x SS1 div neg def
/SS2 90 theta sub dup sin exch cos div def
/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y p2x SS2 div neg def
r1 r2 gt
{
/L1maxX p1x yMin p1y sub SS1 div add def
/L2maxX p2x yMin p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
c1x c2x sub dup mul
c1y c2y sub dup mul
add 0.5 exp
0 dtransform
dup mul exch dup mul add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
/hires exch def
hires mul
/numpix exch def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
/xInc c2x c1x sub numsteps div def
/yInc c2y c1y sub numsteps div def
/rInc r2 r1 sub numsteps div def
/cx c1x def
/cy c1y def
/radius r1 def
newpath
xInc 0 eq yInc 0 eq rInc 0 eq and and
{
0 getrampcolor
cx cy radius 0 360 arc
stroke
NumSamples 1 sub getrampcolor
cx cy radius 72 hires div add 0 360 arc
0 setlinewidth
stroke
}
{
0
numsteps
{
dup
subsampling { round } if
getrampcolor
cx cy radius 0 360 arc
/cx cx xInc add def
/cy cy yInc add def
/radius radius rInc add def
cx cy radius 360 0 arcn
eofill
rampIndxInc add
}
repeat
pop
} ifelse
ext1 {
c2y r2 add r1 lt
{
c2x c2y r2 0 360 arc
fill
}
{
c2y r1 add r2 sub 0.0001 le
{
c2x c2y r2 360 0 arcn
pathbbox
/aymax exch def
/axmax exch def
/aymin exch def
/axmin exch def
/bxMin xMin axmin min def
/byMin yMin aymin min def
/bxMax xMax axmax max def
/byMax yMax aymax max def
bxMin byMin moveto
bxMax byMin lineto
bxMax byMax lineto
bxMin byMax lineto
bxMin byMin lineto
eofill
}
{
c2x c2y r2 0 360 arc fill
r1 r2 eq
{
/p1x r2 neg def
/p1y c2y def
/p2x r2 def
/p2y c2y def
p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
fill
}
{
/AA r2 r1 sub c2y div def
AA -1 eq
{ /theta 89.99 def}
{ /theta AA 1 AA dup mul sub sqrt div 1 atan def}
ifelse
/SS1 90 theta add dup sin exch cos div def
/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
/p1y c2y p1x SS1 div sub def
/SS2 90 theta sub dup sin exch cos div def
/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
/p2y c2y p2x SS2 div sub def
r1 r2 lt
{
/L1maxX p1x yMax p1y sub SS1 div add def
/L2maxX p2x yMax p2y sub SS2 div add def
}
{
/L1maxX 0 def
/L2maxX 0 def
}ifelse
p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
L1maxX L1maxX p1x sub SS1 mul p1y add lineto
fill
}
ifelse
}
ifelse
} ifelse
} if
grestore
grestore
end
end
end
} ifelse
} bd
/GenStrips {
40 dict begin
/background exch def
/ext1 exch def
/ext0 exch def
/BBox exch def
/y2 exch def
/x2 exch def
/y1 exch def
/x1 exch def
/rampdict exch def
gsave
BBox length 0 gt {
newpath
BBox 0 get BBox 1 get moveto
BBox 2 get BBox 0 get sub 0 rlineto
0 BBox 3 get BBox 1 get sub rlineto
BBox 2 get BBox 0 get sub neg 0 rlineto
closepath
clip
newpath
} if
x1 x2 eq
{
y1 y2 lt {/theta 90 def}{/theta 270 def} ifelse
}
{
/slope y2 y1 sub x2 x1 sub div def
/theta slope 1 atan def
x2 x1 lt y2 y1 ge and { /theta theta 180 sub def} if
x2 x1 lt y2 y1 lt and { /theta theta 180 add def} if
}
ifelse
gsave
clippath
x1 y1 translate
theta rotate
{ pathbbox } stopped
{ 0 0 0 0 } if
/yMax exch def
/xMax exch def
/yMin exch def
/xMin exch def
grestore
xMax xMin eq yMax yMin eq or
{
grestore
end
}
{
rampdict begin
20 dict begin
background length 0 gt { background sssetbackground gsave clippath fill grestore } if
gsave
x1 y1 translate
theta rotate
/xStart 0 def
/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
/ySpan yMax yMin sub def
/numsteps NumSamples def
/rampIndxInc 1 def
/subsampling false def
xStart 0 transform
xEnd 0 transform
3 -1 roll
sub dup mul
3 1 roll
sub dup mul
add 0.5 exp 72 div
0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
1 index 1 index lt { exch } if pop
mul
/numpix exch def
numpix 0 ne
{
NumSamples numpix div 0.5 gt
{
/numsteps numpix 2 div round cvi dup 1 le { pop 2 } if def
/rampIndxInc NumSamples 1 sub numsteps div def
/subsampling true def
} if
} if
ext0 {
0 getrampcolor
xMin xStart lt
{ xMin yMin xMin neg ySpan rectfill } if
} if
/xInc xEnd xStart sub numsteps div def
/x xStart def
0
numsteps
{
dup
subsampling { round } if
getrampcolor
x yMin xInc ySpan rectfill
/x x xInc add def
rampIndxInc add
}
repeat
pop
ext1 {
xMax xEnd gt
{ xEnd yMin xMax xEnd sub ySpan rectfill } if
} if
grestore
grestore
end
end
end
} ifelse
} bd
/currentdistillerparams where { pop currentdistillerparams /CoreDistVersion get 5000 lt}{true}ifelse
{
/PDFMark5 {cleartomark} bd
}
{
/PDFMark5 {pdfmark} bd
}ifelse
/ReadByPDFMark5
{
2 dict begin
/makerString exch def string /tmpString exch def
{
currentfile tmpString readline pop
makerString anchorsearch
{
pop pop cleartomark exit
}
{
3 copy /PUT PDFMark5 pop 2 copy (\n) /PUT PDFMark5
} ifelse
}loop
end
}bd
%%EndResource
%%BeginResource: procset pdflev2 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: PDF operators, with code specific for Level 2
/docinitialize {
PDF begin
/_defaulthalftone currenthalftone dd
/_defaultblackgeneration currentblackgeneration dd
/_defaultundercolorremoval currentundercolorremoval dd
/_defaultcolortransfer [currentcolortransfer] dd
/_defaulttransfer currenttransfer dd
end
PDFVars /docSetupDone true put
} bd
/initialize {
PDFVars /docSetupDone get {
_defaulthalftone sethalftone
/_defaultblackgeneration load setblackgeneration
/_defaultundercolorremoval load setundercolorremoval
_defaultcolortransfer aload pop setcolortransfer
} if
false setoverprint
} bd
/terminate { } bd
/c /curveto ld
/cs /setcolorspace ld
/l /lineto ld
/m /moveto ld
/q /gsave ld
/Q /grestore ld
/sc /setcolor ld
/setSA/setstrokeadjust ld
/re {
4 2 roll m
1 index 0 rlineto
0 exch rlineto
neg 0 rlineto
h
} bd
/concattransferfuncs {
[ 3 1 roll /exec load exch /exec load ] cvx
} bd
/concatandsettransfer {
/_defaulttransfer load concattransferfuncs settransfer
} bd
/concatandsetcolortransfer {
_defaultcolortransfer aload pop
8 -1 roll 5 -1 roll concattransferfuncs 7 1 roll
6 -1 roll 4 -1 roll concattransferfuncs 5 1 roll
4 -1 roll 3 -1 roll concattransferfuncs 3 1 roll
concattransferfuncs
setcolortransfer
} bd
/defineRes/defineresource ld
/undefineRes/undefineresource ld
/findRes/findresource ld
currentglobal
true systemdict /setglobal get exec
[/Function /ExtGState /Form /Shading /FunctionDictionary /MadePattern /PatternPrototype /DataSource /Image]
{ /Generic /Category findresource dup length dict copy /Category defineresource pop }
forall
systemdict /setglobal get exec
/ri
{
/findcolorrendering isdefined?
{
mark exch
findcolorrendering
counttomark 2 eq
{ type /booleantype eq
{ dup type /nametype eq
{ dup /ColorRendering resourcestatus
{ pop pop
dup /DefaultColorRendering ne
{
/ColorRendering findresource
setcolorrendering
} if
} if
} if
} if
} if
cleartomark
}
{ pop
} ifelse
} bd
/knownColorants? {
pop false
} bd
/getrampcolor {
cvi
/indx exch def
0 1 NumComp 1 sub {
dup
Samples exch get
dup type /stringtype eq { indx get } if
exch
Scaling exch get aload pop
3 1 roll
mul add
} for
setcolor
} bd
/sssetbackground { aload pop setcolor } bd
%%EndResource
%%BeginResource: procset pdftext 6.0 1
%%Copyright: Copyright 1987-2001,2003 Adobe Systems Incorporated. All Rights Reserved.
%%Title: Text operators for PDF
PDF /PDFText 78 dict dup begin put
/docinitialize
{
/resourcestatus where {
pop
/CIDParams /ProcSet resourcestatus {
pop pop
false /CIDParams /ProcSet findresource /SetBuildCompatible get exec
} if
} if
PDF begin
PDFText /_pdfDefineIdentity-H known
{ PDFText /_pdfDefineIdentity-H get exec}
if
end
} bd
/initialize {
PDFText begin
} bd
/terminate { end } bd
Level2?
{
/_safeput
{
3 -1 roll load 3 1 roll put
}
bd
}
{
/_safeput
{
2 index load dup dup length exch maxlength ge
{ dup length 5 add dict copy
3 index xdd
}
{ pop }
ifelse
3 -1 roll load 3 1 roll put
}
bd
}
ifelse
/pdf_has_composefont? systemdict /composefont known def
/CopyFont {
{
1 index /FID ne 2 index /UniqueID ne and
{ def } { pop pop } ifelse
} forall
} bd
/Type0CopyFont
{
exch
dup length dict
begin
CopyFont
[
exch
FDepVector
{
dup /FontType get 0 eq
{
1 index Type0CopyFont
/_pdfType0 exch definefont
}
{
/_pdfBaseFont exch
2 index exec
}
ifelse
exch
}
forall
pop
]
/FDepVector exch def
currentdict
end
} bd
Level2? {currentglobal true setglobal} if
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF] def
Level2? {setglobal} if
/modEnc {
/_enc xdd
/_icode 0 dd
counttomark 1 sub -1 0
{
index
dup type /nametype eq
{
_enc _icode 3 -1 roll put
_icode 1 add
}
if
/_icode xdd
} for
cleartomark
_enc
} bd
/trEnc {
/_enc xdd
255 -1 0 {
exch dup -1 eq
{ pop /.notdef }
{ Encoding exch get }
ifelse
_enc 3 1 roll put
} for
pop
_enc
} bd
/TE {
/_i xdd
StandardEncoding 256 array copy modEnc
_pdfEncodings exch _i exch put
} bd
Level2?
{
/pdfPatchCStrings
{
currentdict /CharStrings known currentdict /FontType known and
{
FontType 1 eq CharStrings type /dicttype eq and
{
CharStrings /mu known CharStrings /mu1 known not and CharStrings wcheck and
{
CharStrings /mu get
type /stringtype eq
{
currentglobal
CharStrings /mu1
CharStrings /mu get
dup gcheck setglobal
dup length string copy
put
setglobal
} if
} if
} if
} if
} bd
}
{ /pdfPatchCStrings {} bd }
ifelse
/TZ
{
/_usePDFEncoding xdd
findfont
dup length 6 add dict
begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
/pdf_origFontName FontName def
/FontName exch def
currentdict /PaintType known
{ PaintType 2 eq {/PaintType 0 def} if }
if
_usePDFEncoding 0 ge
{
/Encoding _pdfEncodings _usePDFEncoding get def
pop
}
{
_usePDFEncoding -1 eq
{
counttomark 0 eq
{ pop }
{
Encoding 256 array copy
modEnc /Encoding exch def
}
ifelse
}
{
256 array
trEnc /Encoding exch def
}
ifelse
}
ifelse
pdf_EuroProcSet pdf_origFontName known
{
pdf_origFontName pdf_AddEuroGlyphProc
} if
Level2?
{
currentdict /pdf_origFontName undef
} if
FontName currentdict
end
definefont pop
}
bd
Level2?
{
/TZG
{
currentglobal true setglobal
2 index _pdfFontStatus
{
2 index findfont
false setglobal
3 index findfont
true setglobal
ne
{
2 index findfont dup rcheck
{
dup length dict begin
{
1 index /FID ne { def } { pop pop } ifelse
} forall
pdfPatchCStrings
currentdict end
}
if
3 index exch definefont pop
}
if
} if
setglobal
TZ
} bd
}
{
/TZG {TZ} bd
} ifelse
Level2?
{
currentglobal false setglobal
userdict /pdftext_data 5 dict put
pdftext_data
begin
/saveStacks
{
pdftext_data
begin
/vmmode currentglobal def
false setglobal
count array astore /os exch def
end
countdictstack array dictstack pdftext_data exch /ds exch put
cleardictstack pdftext_data /dscount countdictstack put
pdftext_data /vmmode get setglobal
} bind def
/restoreStacks
{
pdftext_data /vmmode currentglobal put false setglobal
clear cleardictstack
pdftext_data /ds get dup
pdftext_data /dscount get 1 2 index length 1 sub
{ get begin dup } for
pop pop
pdftext_data /os get aload pop
pdftext_data /vmmode get setglobal
} bind def
/testForClonePrinterBug
{
currentglobal true setglobal
/undefinedCategory /Generic /Category findresource
dup length dict copy /Category defineresource pop
setglobal
pdftext_data /saveStacks get exec
pdftext_data /vmmode currentglobal put false setglobal
/undefined /undefinedCategory { resourcestatus } stopped
pdftext_data exch /bugFound exch put
pdftext_data /vmmode get setglobal
pdftext_data /restoreStacks get exec
pdftext_data /bugFound get
} bind def
end
setglobal
/pdf_resourcestatus
pdftext_data /testForClonePrinterBug get exec
{
{
pdftext_data /saveStacks get exec
pdftext_data /os get dup dup length 1 sub
dup 1 sub dup 0 lt { pop 0 } if
exch 1 exch { get exch dup } for
pop pop
{ resourcestatus }
stopped
{
clear cleardictstack pdftext_data /restoreStacks get exec
{ pop pop } stopped pop false
}
{
count array astore pdftext_data exch /results exch put
pdftext_data /restoreStacks get exec pop pop
pdftext_data /results get aload pop
}
ifelse
}
}
{ { resourcestatus } }
ifelse
bd
}
if
Level2?
{
/_pdfUndefineResource
{
currentglobal 3 1 roll
_pdf_FontDirectory 2 index 2 copy known
{undef}
{pop pop}
ifelse
1 index (pdf) exch _pdfConcatNames 1 index
1 index 1 _pdfConcatNames 1 index
5 index 1 _pdfConcatNames 1 index
4
{
2 copy pdf_resourcestatus
{
pop 2 lt
{2 copy findresource gcheck setglobal undefineresource}
{pop pop}
ifelse
}
{ pop pop}
ifelse
} repeat
setglobal
} bd
}
{
/_pdfUndefineResource { pop pop} bd
}
ifelse
Level2?
{
/_pdfFontStatus
{
currentglobal exch
/Font pdf_resourcestatus
{pop pop true}
{false}
ifelse
exch setglobal
} bd
}
{
/_pdfFontStatusString 50 string def
_pdfFontStatusString 0 (fonts/) putinterval
/_pdfFontStatus
{
FontDirectory 1 index known
{ pop true }
{
_pdfFontStatusString 6 42 getinterval
cvs length 6 add
_pdfFontStatusString exch 0 exch getinterval
{ status } stopped
{pop false}
{
{ pop pop pop pop true}
{ false }
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
Level2?
{
/_pdfCIDFontStatus
{
/CIDFont /Category pdf_resourcestatus
{
pop pop
/CIDFont pdf_resourcestatus
{pop pop true}
{false}
ifelse
}
{ pop false }
ifelse
} bd
}
if
/_pdfString100 100 string def
/_pdfComposeFontName
{
dup length 1 eq
{
0 get
1 index
type /nametype eq
{
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
2 index exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
exch pop
true
}
{
pop pop
false
}
ifelse
}
{
false
}
ifelse
dup {exch cvn exch} if
} bd
/_pdfConcatNames
{
exch
_pdfString100 cvs
length dup dup _pdfString100 exch (-) putinterval
_pdfString100 exch 1 add dup _pdfString100 length exch sub getinterval
3 -1 roll exch cvs length
add 1 add _pdfString100 exch 0 exch getinterval
cvn
} bind def
/_pdfTextTempString 50 string def
/_pdfRegOrderingArray [(Adobe-Japan1) (Adobe-CNS1) (Adobe-Korea1) (Adobe-GB1)] def
/_pdf_CheckCIDSystemInfo
{
1 index _pdfTextTempString cvs
(Identity) anchorsearch
{
pop pop pop pop true
}
{
false
_pdfRegOrderingArray
{
2 index exch
anchorsearch
{ pop pop pop true exit}
{ pop }
ifelse
}
forall
exch pop
exch /CIDFont findresource
/CIDSystemInfo get
3 -1 roll /CMap findresource
/CIDSystemInfo get
exch
3 -1 roll
{
2 copy
/Supplement get
exch
dup type /dicttype eq
{/Supplement get}
{pop 0 }
ifelse
ge
}
{ true }
ifelse
{
dup /Registry get
2 index /Registry get eq
{
/Ordering get
exch /Ordering get
dup type /arraytype eq
{
1 index type /arraytype eq
{
true
1 index length 1 sub -1 0
{
dup 2 index exch get exch 3 index exch get ne
{ pop false exit}
if
} for
exch pop exch pop
}
{ pop pop false }
ifelse
}
{
eq
}
ifelse
}
{ pop pop false }
ifelse
}
{ pop pop false }
ifelse
}
ifelse
} bind def
pdf_has_composefont?
{
/_pdfComposeFont
{
2 copy _pdfComposeFontName not
{
2 index
}
if
(pdf) exch _pdfConcatNames
dup _pdfFontStatus
{ dup findfont 5 2 roll pop pop pop true}
{
4 1 roll
1 index /CMap pdf_resourcestatus
{
pop pop
true
}
{false}
ifelse
1 index true exch
{
_pdfCIDFontStatus not
{pop false exit}
if
}
forall
and
{
1 index 1 index 0 get _pdf_CheckCIDSystemInfo
{
3 -1 roll pop
2 index 3 1 roll
composefont true
}
{
pop pop exch pop false
}
ifelse
}
{
_pdfComposeFontName
{
dup _pdfFontStatus
{
exch pop
1 index exch
findfont definefont true
}
{
pop exch pop
false
}
ifelse
}
{
exch pop
false
}
ifelse
}
ifelse
{ true }
{
dup _pdfFontStatus
{ dup findfont true }
{ pop false }
ifelse
}
ifelse
}
ifelse
} bd
}
{
/_pdfComposeFont
{
_pdfComposeFontName not
{
dup
}
if
dup
_pdfFontStatus
{exch pop dup findfont true}
{
1 index
dup type /nametype eq
{pop}
{cvn}
ifelse
eq
{pop false}
{
dup _pdfFontStatus
{dup findfont true}
{pop false}
ifelse
}
ifelse
}
ifelse
} bd
}
ifelse
/_pdfStyleDicts 4 dict dup begin
/Adobe-Japan1 4 dict dup begin
Level2?
{
/Serif
/HeiseiMin-W3-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMin-W3}
{
/HeiseiMin-W3 _pdfCIDFontStatus
{/HeiseiMin-W3}
{/Ryumin-Light}
ifelse
}
ifelse
def
/SansSerif
/HeiseiKakuGo-W5-83pv-RKSJ-H _pdfFontStatus
{/HeiseiKakuGo-W5}
{
/HeiseiKakuGo-W5 _pdfCIDFontStatus
{/HeiseiKakuGo-W5}
{/GothicBBB-Medium}
ifelse
}
ifelse
def
/HeiseiMaruGo-W4-83pv-RKSJ-H _pdfFontStatus
{/HeiseiMaruGo-W4}
{
/HeiseiMaruGo-W4 _pdfCIDFontStatus
{/HeiseiMaruGo-W4}
{
/Jun101-Light-RKSJ-H _pdfFontStatus
{ /Jun101-Light }
{ SansSerif }
ifelse
}
ifelse
}
ifelse
/RoundSansSerif exch def
/Default Serif def
}
{
/Serif /Ryumin-Light def
/SansSerif /GothicBBB-Medium def
{
(fonts/Jun101-Light-83pv-RKSJ-H) status
}stopped
{pop}{
{ pop pop pop pop /Jun101-Light }
{ SansSerif }
ifelse
/RoundSansSerif exch def
}ifelse
/Default Serif def
}
ifelse
end
def
/Adobe-Korea1 4 dict dup begin
/Serif /HYSMyeongJo-Medium def
/SansSerif /HYGoThic-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-GB1 4 dict dup begin
/Serif /STSong-Light def
/SansSerif /STHeiti-Regular def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
/Adobe-CNS1 4 dict dup begin
/Serif /MKai-Medium def
/SansSerif /MHei-Medium def
/RoundSansSerif SansSerif def
/Default Serif def
end
def
end
def
/TZzero
{
/_wmode xdd
/_styleArr xdd
/_regOrdering xdd
3 copy
_pdfComposeFont
{
5 2 roll pop pop pop
}
{
[
0 1 _styleArr length 1 sub
{
_styleArr exch get
_pdfStyleDicts _regOrdering 2 copy known
{
get
exch 2 copy known not
{ pop /Default }
if
get
}
{
pop pop pop /Unknown
}
ifelse
}
for
]
exch pop
2 index 3 1 roll
_pdfComposeFont
{3 -1 roll pop}
{
findfont dup /FontName get exch
}
ifelse
}
ifelse
dup /WMode 2 copy known
{ get _wmode ne }
{ pop pop _wmode 1 eq}
ifelse
{
exch _wmode _pdfConcatNames
dup _pdfFontStatus
{ exch pop dup findfont false}
{ exch true }
ifelse
}
{
dup /FontType get 0 ne
}
ifelse
{
dup /FontType get 3 eq _wmode 1 eq and
{
_pdfVerticalRomanT3Font dup length 10 add dict copy
begin
/_basefont exch
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put dup 16#a5 /yen put dup 16#b4 /yen put}
if
def
FontName
currentdict
end
definefont
def
/Encoding _basefont /Encoding get def
/_fauxfont true def
}
{
dup length 3 add dict
begin
{1 index /FID ne {def}{pop pop} ifelse }
forall
FontType 0 ne
{
/Encoding Encoding dup length array copy
dup 16#27 /quotesingle put
dup 16#60 /grave put
_regOrdering /Adobe-Japan1 eq
{dup 16#5c /yen put}
if
def
/_fauxfont true def
} if
} ifelse
/WMode _wmode def
dup dup /FontName exch def
currentdict
end
definefont pop
}
{
pop
}
ifelse
/_pdf_FontDirectory 3 1 roll _safeput
}
bd
Level2?
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
selectfont
} bd
}
{
/Tf {
_pdf_FontDirectory 2 index 2 copy known
{get exch 3 -1 roll pop}
{pop pop}
ifelse
exch findfont exch
dup type /arraytype eq
{makefont}
{scalefont}
ifelse
setfont
} bd
}
ifelse
/cshow where
{
pop /pdf_cshow /cshow load dd
/pdf_remove2 {pop pop} dd
}
{
/pdf_cshow {exch forall} dd
/pdf_remove2 {} dd
} ifelse
/pdf_xshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_yshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
_pdf_x _pdf_y moveto
0 exch
rmoveto
}
ifelse
_pdf_i 1 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdf_xyshow
{
/_pdf_na xdd
/_pdf_i 0 dd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 /_pdf_showproc load exec
{_pdf_na _pdf_i get} stopped
{ pop pop }
{
1 pop
{_pdf_na _pdf_i 1 add get} stopped
{ pop pop pop}
{
_pdf_x _pdf_y moveto
rmoveto
}
ifelse
}
ifelse
_pdf_i 2 add /_pdf_i xdd
currentpoint
/_pdf_y xdd
/_pdf_x xdd
}
exch
pdf_cshow
} bd
/pdfl1xs {/_pdf_showproc /show load dd pdf_xshow} bd
/pdfl1ys {/_pdf_showproc /show load dd pdf_yshow} bd
/pdfl1xys {/_pdf_showproc /show load dd pdf_xyshow} bd
Level2? _ColorSep5044? not and
{
/pdfxs {{xshow} stopped {pdfl1xs} if} bd
/pdfys {{yshow} stopped {pdfl1ys} if} bd
/pdfxys {{xyshow} stopped {pdfl1xys} if} bd
}
{
/pdfxs /pdfl1xs load dd
/pdfys /pdfl1ys load dd
/pdfxys /pdfl1xys load dd
} ifelse
/pdf_charpath {false charpath} bd
/pdf_xcharpath {/_pdf_showproc /pdf_charpath load dd pdf_xshow} bd
/pdf_ycharpath {/_pdf_showproc /pdf_charpath load dd pdf_yshow} bd
/pdf_xycharpath {/_pdf_showproc /pdf_charpath load dd pdf_xyshow} bd
/pdf_strokepath
{
{
pdf_remove2
_pdf_str1 exch 0 exch put
_pdf_str1 false charpath
currentpoint S moveto
} bind
exch pdf_cshow
} bd
/pdf_xstrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xshow} bd
/pdf_ystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_yshow} bd
/pdf_xystrokepath {/_pdf_showproc {pdf_charpath S} dd pdf_xyshow} bd
Level2? {currentglobal true setglobal} if
/d0/setcharwidth ld
/nND {{/.notdef} repeat} bd
/T3Defs {
/BuildChar
{
1 index /Encoding get exch get
1 index /BuildGlyph get exec
}
def
/BuildGlyph {
exch begin
GlyphProcs exch get exec
end
} def
/_pdfT3Font true def
} bd
/_pdfBoldRomanWidthProc
{
stringwidth 1 index 0 ne { exch .03 add exch }if setcharwidth
0 0
} bd
/_pdfType0WidthProc
{
dup stringwidth 0 0 moveto
2 index true charpath pathbbox
0 -1
7 index 2 div .88
setcachedevice2
pop
0 0
} bd
/_pdfType0WMode1WidthProc
{
dup stringwidth
pop 2 div neg -0.88
2 copy
moveto
0 -1
5 -1 roll true charpath pathbbox
setcachedevice
} bd
/_pdfBoldBaseFont
11 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/Encoding cHexEncoding def
/_setwidthProc /_pdfBoldRomanWidthProc load def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
pdf_has_composefont?
{
/_pdfBoldBaseCIDFont
11 dict begin
/CIDFontType 1 def
/CIDFontName /_pdfBoldBaseCIDFont def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_setwidthProc /_pdfType0WidthProc load def
/_bcstr2 2 string def
/BuildGlyph
{
exch begin
_basefont setfont
_bcstr2 1 2 index 256 mod put
_bcstr2 0 3 -1 roll 256 idiv put
_bcstr2 dup _setwidthProc
3 copy
moveto
show
_basefonto setfont
moveto
show
end
}bd
currentdict
end
def
/_pdfDefineIdentity-H
{
/Identity-H /CMap PDFText /pdf_resourcestatus get exec
{
pop pop
}
{
/CIDInit/ProcSet findresource begin 12 dict begin
begincmap
/CIDSystemInfo
3 dict begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
currentdict
end
def
/CMapName /Identity-H def
/CMapVersion 1 def
/CMapType 1 def
1 begincodespacerange
<0000> <ffff>
endcodespacerange
1 begincidrange
<0000> <ffff> 0
endcidrange
endcmap
CMapName currentdict/CMap defineresource pop
end
end
} ifelse
} def
} if
/_pdfVerticalRomanT3Font
10 dict begin
/FontType 3 def
/FontMatrix[1 0 0 1 0 0]def
/FontBBox[0 0 1 1]def
/_bcstr1 1 string def
/BuildChar
{
exch begin
_basefont setfont
_bcstr1 dup 0 4 -1 roll put
dup
_pdfType0WidthProc
moveto
show
end
}bd
currentdict
end
def
Level2? {setglobal} if
/MakeBoldFont
{
dup /ct_SyntheticBold known
{
dup length 3 add dict begin
CopyFont
/ct_StrokeWidth .03 0 FontMatrix idtransform pop def
/ct_SyntheticBold true def
currentdict
end
definefont
}
{
dup dup length 3 add dict
begin
CopyFont
/PaintType 2 def
/StrokeWidth .03 0 FontMatrix idtransform pop def
/dummybold currentdict
end
definefont
dup /FontType get dup 9 ge exch 11 le and
{
_pdfBoldBaseCIDFont
dup length 3 add dict copy begin
dup /CIDSystemInfo get /CIDSystemInfo exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefont exch def
/_Type0Identity /Identity-H 3 -1 roll [ exch ] composefont
/_basefonto exch def
currentdict
end
/CIDFont defineresource
}
{
_pdfBoldBaseFont
dup length 3 add dict copy begin
/_basefont exch def
/_basefonto exch def
currentdict
end
definefont
}
ifelse
}
ifelse
} bd
/MakeBold {
1 index
_pdf_FontDirectory 2 index 2 copy known
{get}
{exch pop}
ifelse
findfont
dup
/FontType get 0 eq
{
dup /WMode known {dup /WMode get 1 eq }{false} ifelse
version length 4 ge
and
{version 0 4 getinterval cvi 2015 ge }
{true}
ifelse
{/_pdfType0WidthProc}
{/_pdfType0WMode1WidthProc}
ifelse
_pdfBoldBaseFont /_setwidthProc 3 -1 roll load put
{MakeBoldFont} Type0CopyFont definefont
}
{
dup /_fauxfont known not 1 index /SubstMaster known not and
{
_pdfBoldBaseFont /_setwidthProc /_pdfBoldRomanWidthProc load put
MakeBoldFont
}
{
2 index 2 index eq
{ exch pop }
{
dup length dict begin
CopyFont
currentdict
end
definefont
}
ifelse
}
ifelse
}
ifelse
pop pop
dup /dummybold ne
{/_pdf_FontDirectory exch dup _safeput }
{ pop }
ifelse
}bd
/MakeItalic {
_pdf_FontDirectory exch 2 copy known
{get}
{exch pop}
ifelse
dup findfont
dup /FontInfo 2 copy known
{
get
/ItalicAngle 2 copy known
{get 0 eq }
{ pop pop true}
ifelse
}
{ pop pop true}
ifelse
{
exch pop
dup /FontType get 0 eq Level2? not and
{ dup /FMapType get 6 eq }
{ false }
ifelse
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1Type0 }
{ _italMtxType0 }
ifelse
}
{ pop pop _italMtxType0 }
ifelse
}
{
dup /WMode 2 copy known
{
get 1 eq
{ _italMtx_WMode1 }
{ _italMtx }
ifelse
}
{ pop pop _italMtx }
ifelse
}
ifelse
makefont
dup /FontType get 42 eq Level2? not or
{
dup length dict begin
CopyFont
currentdict
end
}
if
1 index exch
definefont pop
/_pdf_FontDirectory exch dup _safeput
}
{
pop
2 copy ne
{
/_pdf_FontDirectory 3 1 roll _safeput
}
{ pop pop }
ifelse
}
ifelse
}bd
/MakeBoldItalic {
/dummybold exch
MakeBold
/dummybold
MakeItalic
}bd
Level2?
{
/pdf_CopyDict
{1 index length add dict copy}
def
}
{
/pdf_CopyDict
{
1 index length add dict
1 index wcheck
{ copy }
{ begin
{def} forall
currentdict
end
}
ifelse
}
def
}
ifelse
/pdf_AddEuroGlyphProc
{
currentdict /CharStrings known
{
CharStrings /Euro known not
{
dup
/CharStrings
CharStrings 1 pdf_CopyDict
begin
/Euro pdf_EuroProcSet 4 -1 roll get def
currentdict
end
def
/pdf_PSBuildGlyph /pdf_PSBuildGlyph load def
/pdf_PathOps /pdf_PathOps load def
/Symbol eq Encoding 160 get /.notdef eq and
{
/Encoding Encoding dup length array copy
dup 160 /Euro put def
}
if
}
{ pop
}
ifelse
}
{ pop
}
ifelse
}
def
Level2? {currentglobal true setglobal} if
/pdf_PathOps 4 dict dup begin
/m {moveto} def
/l {lineto} def
/c {curveto} def
/cp {closepath} def
end
def
/pdf_PSBuildGlyph
{
gsave
8 -1 roll pop
7 1 roll
currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse
dup 9 1 roll
{
currentdict /StrokeWidth 2 copy known
{
get 2 div
5 1 roll
4 -1 roll 4 index sub
4 1 roll
3 -1 roll 4 index sub
3 1 roll
exch 4 index add exch
4 index add
5 -1 roll pop
}
{
pop pop
}
ifelse
}
if
setcachedevice
pdf_PathOps begin
exec
end
{
currentdict /StrokeWidth 2 copy known
{ get }
{ pop pop 0 }
ifelse
setlinewidth stroke
}
{
fill
}
ifelse
grestore
} def
/pdf_EuroProcSet 13 dict def
pdf_EuroProcSet
begin
/Courier-Bold
{
600 0 6 -12 585 612
{
385 274 m
180 274 l
179 283 179 293 179 303 c
179 310 179 316 180 323 c
398 323 l
423 404 l
197 404 l
219 477 273 520 357 520 c
409 520 466 490 487 454 c
487 389 l
579 389 l
579 612 l
487 612 l
487 560 l
449 595 394 612 349 612 c
222 612 130 529 98 404 c
31 404 l
6 323 l
86 323 l
86 304 l
86 294 86 284 87 274 c
31 274 l
6 193 l
99 193 l
129 77 211 -12 359 -12 c
398 -12 509 8 585 77 c
529 145 l
497 123 436 80 356 80 c
285 80 227 122 198 193 c
360 193 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-BoldOblique /Courier-Bold load def
/Courier
{
600 0 17 -12 578 584
{
17 204 m
97 204 l
126 81 214 -12 361 -12 c
440 -12 517 17 578 62 c
554 109 l
501 70 434 43 366 43 c
266 43 184 101 154 204 c
380 204 l
400 259 l
144 259 l
144 270 143 281 143 292 c
143 299 143 307 144 314 c
418 314 l
438 369 l
153 369 l
177 464 249 529 345 529 c
415 529 484 503 522 463 c
522 391 l
576 391 l
576 584 l
522 584 l
522 531 l
473 566 420 584 348 584 c
216 584 122 490 95 369 c
37 369 l
17 314 l
87 314 l
87 297 l
87 284 88 272 89 259 c
37 259 l
cp
600 0 m
}
pdf_PSBuildGlyph
} def
/Courier-Oblique /Courier load def
/Helvetica
{
556 0 24 -19 541 703
{
541 628 m
510 669 442 703 354 703 c
201 703 117 607 101 444 c
50 444 l
25 372 l
97 372 l
97 301 l
49 301 l
24 229 l
103 229 l
124 67 209 -19 350 -19 c
435 -19 501 25 509 32 c
509 131 l
492 105 417 60 343 60 c
267 60 204 127 197 229 c
406 229 l
430 301 l
191 301 l
191 372 l
455 372 l
479 444 l
194 444 l
201 531 245 624 348 624 c
433 624 484 583 509 534 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-Oblique /Helvetica load def
/Helvetica-Bold
{
556 0 12 -19 563 710
{
563 621 m
537 659 463 710 363 710 c
216 710 125 620 101 462 c
51 462 l
12 367 l
92 367 l
92 346 l
92 337 93 328 93 319 c
52 319 l
12 224 l
102 224 l
131 58 228 -19 363 -19 c
417 -19 471 -12 517 18 c
517 146 l
481 115 426 93 363 93 c
283 93 254 166 246 224 c
398 224 l
438 319 l
236 319 l
236 367 l
457 367 l
497 462 l
244 462 l
259 552 298 598 363 598 c
425 598 464 570 486 547 c
507 526 513 517 517 509 c
cp
556 0 m
}
pdf_PSBuildGlyph
} def
/Helvetica-BoldOblique /Helvetica-Bold load def
/Symbol
{
750 0 20 -12 714 685
{
714 581 m
650 645 560 685 465 685 c
304 685 165 580 128 432 c
50 432 l
20 369 l
116 369 l
115 356 115 347 115 337 c
115 328 115 319 116 306 c
50 306 l
20 243 l
128 243 l
165 97 300 -12 465 -12 c
560 -12 635 25 685 65 c
685 155 l
633 91 551 51 465 51 c
340 51 238 131 199 243 c
555 243 l
585 306 l
184 306 l
183 317 182 326 182 336 c
182 346 183 356 184 369 c
614 369 l 644 432 l
199 432 l
233 540 340 622 465 622 c
555 622 636 580 685 520 c
cp
750 0 m
}
pdf_PSBuildGlyph
} def
/Times-Bold
{
500 0 16 -14 478 700
{
367 308 m
224 308 l
224 368 l
375 368 l
380 414 l
225 414 l
230 589 257 653 315 653 c
402 653 431 521 444 457 c
473 457 l
473 698 l
444 697 l
441 679 437 662 418 662 c
393 662 365 700 310 700 c
211 700 97 597 73 414 c
21 414 l
16 368 l
69 368 l
69 359 68 350 68 341 c
68 330 68 319 69 308 c
21 308 l
16 262 l
73 262 l
91 119 161 -14 301 -14 c
380 -14 443 50 478 116 c
448 136 l
415 84 382 40 323 40 c
262 40 231 77 225 262 c
362 262 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-BoldItalic
{
500 0 9 -20 542 686
{
542 686 m
518 686 l
513 673 507 660 495 660 c
475 660 457 683 384 683 c
285 683 170 584 122 430 c
58 430 l
34 369 l
105 369 l
101 354 92 328 90 312 c
34 312 l
9 251 l
86 251 l
85 238 84 223 84 207 c
84 112 117 -14 272 -14 c
326 -14 349 9 381 9 c
393 9 393 -10 394 -20 c
420 -20 l
461 148 l
429 148 l
416 109 362 15 292 15 c
227 15 197 55 197 128 c
197 162 204 203 216 251 c
378 251 l
402 312 l
227 312 l
229 325 236 356 241 369 c
425 369 l
450 430 l
255 430 l
257 435 264 458 274 488 c
298 561 337 654 394 654 c
437 654 484 621 484 530 c
484 516 l
516 516 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Italic
{
500 0 23 -10 595 692
{
399 317 m
196 317 l
199 340 203 363 209 386 c
429 386 l
444 424 l
219 424 l
246 514 307 648 418 648 c
448 648 471 638 492 616 c
529 576 524 529 527 479 c
549 475 l
595 687 l
570 687 l
562 674 558 664 542 664 c
518 664 474 692 423 692 c
275 692 162 551 116 424 c
67 424 l
53 386 l
104 386 l
98 363 93 340 90 317 c
37 317 l
23 279 l
86 279 l
85 266 85 253 85 240 c
85 118 137 -10 277 -10 c
370 -10 436 58 488 128 c
466 149 l
424 101 375 48 307 48 c
212 48 190 160 190 234 c
190 249 191 264 192 279 c
384 279 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
/Times-Roman
{
500 0 10 -12 484 692
{
347 298 m
171 298 l
170 310 170 322 170 335 c
170 362 l
362 362 l
374 403 l
172 403 l
184 580 244 642 308 642 c
380 642 434 574 457 457 c
481 462 l
474 691 l
449 691 l
433 670 429 657 410 657 c
394 657 360 692 299 692 c
204 692 94 604 73 403 c
22 403 l
10 362 l
70 362 l
69 352 69 341 69 330 c
69 319 69 308 70 298 c
22 298 l
10 257 l
73 257 l
97 57 216 -12 295 -12 c
364 -12 427 25 484 123 c
458 142 l
425 101 384 37 316 37 c
256 37 189 84 173 257 c
335 257 l
cp
500 0 m
}
pdf_PSBuildGlyph
} def
end
Level2? {setglobal} if
currentdict readonly pop end
%%EndResource
PDFText begin
[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis
/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute
/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde
/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex
/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls
/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash
/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef
/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash
/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef
/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe
/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide
/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright
/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand
/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex
/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex
/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla
/hungarumlaut/ogonek/caron
0 TE
[1/dotlessi/caron 39/quotesingle 96/grave 
127/bullet/Euro/bullet/quotesinglbase/florin/quotedblbase/ellipsis
/dagger/daggerdbl/circumflex/perthousand/Scaron/guilsinglleft/OE
/bullet/Zcaron/bullet/bullet/quoteleft/quoteright/quotedblleft
/quotedblright/bullet/endash/emdash/tilde/trademark/scaron
/guilsinglright/oe/bullet/zcaron/Ydieresis/space/exclamdown/cent/sterling
/currency/yen/brokenbar/section/dieresis/copyright/ordfeminine
/guillemotleft/logicalnot/hyphen/registered/macron/degree/plusminus
/twosuperior/threesuperior/acute/mu/paragraph/periodcentered/cedilla
/onesuperior/ordmasculine/guillemotright/onequarter/onehalf/threequarters
/questiondown/Agrave/Aacute/Acircumflex/Atilde/Adieresis/Aring/AE/Ccedilla
/Egrave/Eacute/Ecircumflex/Edieresis/Igrave/Iacute/Icircumflex/Idieresis
/Eth/Ntilde/Ograve/Oacute/Ocircumflex/Otilde/Odieresis/multiply/Oslash
/Ugrave/Uacute/Ucircumflex/Udieresis/Yacute/Thorn/germandbls/agrave
/aacute/acircumflex/atilde/adieresis/aring/ae/ccedilla/egrave/eacute
/ecircumflex/edieresis/igrave/iacute/icircumflex/idieresis/eth/ntilde
/ograve/oacute/ocircumflex/otilde/odieresis/divide/oslash/ugrave/uacute
/ucircumflex/udieresis/yacute/thorn/ydieresis
1 TE
end
%%BeginResource: procset pdfasc.prc 6.0 1
%%Copyright: Copyright 1992-2003 Adobe Systems Incorporated. All Rights Reserved.
/ASR {
13 dict begin
/mirV? exch def
/mirH? exch def
/center? exch def
/autorotate? exch def
/angle exch def
/shrink exch def
/Pury exch def
/Purx exch def
/Plly exch def
/Pllx exch def
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury 0 eq Durx 0 eq and Dlly 0 eq Dllx 0 eq and and
{ shrink 0 gt { GClipBBox } { GPageBBox } ifelse }
{ ITransDBBox }
ifelse
/PHt Pury Plly sub def
/PW Purx Pllx sub def
/DHt Dury Dlly sub def
/DW Durx Dllx sub def
angle 90 eq angle 270 eq or
{
PHt /PHt PW def /PW exch def
} if
autorotate? PHt PW ne and DHt DW ne and
{
DHt DW ge
PHt PW ge
ne
{ /angle angle 90 add def
PHt /PHt PW def /PW exch def
}
if
} if
angle 0 ne
{
/angle angle 360 mod def
angle rotate
angle 90 eq
{ 0 DW neg translate }
if
angle 180 eq
{ DW neg DHt neg translate }
if
angle 270 eq
{ DHt neg 0 translate }
if
} if
center?
{
ITransBBox
Durx Dllx add 2 div Dury Dlly add 2 div
Purx Pllx add -2 div Pury Plly add -2 div
3 -1 roll add exch
3 -1 roll add exch
translate
}
{
ITransBBox
angle 0 eq
{Dllx Pllx sub Dury Pury sub}
if
angle 90 eq
{Durx Purx sub Dury Pury sub}
if
angle 180 eq
{Durx Purx sub Dlly Plly sub}
if
angle 270 eq
{Dllx Pllx sub Dlly Plly sub}
if
translate
}
ifelse
mirH? mirV? or
{
ITransBBox
mirH?
{
-1 1 scale
Durx Dllx add neg 0 translate
} if
mirV?
{
1 -1 scale
0 Dury Dlly add neg translate
} if
} if
shrink 0 ne
{
ITransBBox
Dury Dlly sub Pury Plly sub div
Durx Dllx sub Purx Pllx sub div
2 copy gt { exch } if pop
shrink 1 eq
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{
shrink 2 eq 1 index 1.0 lt and
{
Durx Dllx add 2 div Dury Dlly add 2 div translate
dup scale
Purx Pllx add -2 div Pury Plly add -2 div translate
}
{ pop }
ifelse
}
ifelse
} if
end
} [/autorotate? /shrink? /mirH? /mirV? /angle /Pury /Purx /Plly /Pllx /Durx /Dury /Dllx /Dlly /PW /PHt /DW /DHt
/Devurx /Devury /Devllx /Devlly /pdfHt /pdfW]
bld
/GClipBBox
{
gsave newpath clippath pathbbox newpath grestore
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
ITransDBBox
} [/Durx /Dury /Dllx /Dlly]
bld
/GPageBBox
{
{
currentpagedevice /PageSize get aload pop
/Devury exch def /Devurx exch def
/Devllx 0 def /Devlly 0 def
ITransBBox
}
stopped
{ GClipBBox }
if
} [/Devurx /Devury /Devllx /Devlly ]
bld
/ITransDBBox
{
Durx Dury transform matrix defaultmatrix itransform
/Devury exch def
/Devurx exch def
Dllx Dlly transform matrix defaultmatrix itransform
/Devlly exch def
/Devllx exch def
Devury Devlly lt {/Devlly Devury /Devury Devlly def def} if
Devurx Devllx lt {/Devllx Devurx /Devurx Devllx def def} if
} [/Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
/ITransBBox
{
/um matrix currentmatrix matrix defaultmatrix matrix invertmatrix matrix concatmatrix def
Devllx Devlly um itransform
Devurx Devury um itransform
/Dury exch def
/Durx exch def
/Dlly exch def
/Dllx exch def
Dury Dlly lt {/Dlly Dury /Dury Dlly def def} if
Durx Dllx lt {/Dllx Durx /Durx Dllx def def} if
} [ /um /Durx /Dury /Dllx /Dlly /Devurx /Devury /Devllx /Devlly ]
bld
%%EndResource
currentdict readonly pop
end end
/currentpacking where {pop setpacking}if
PDFVars/DocInitAll{[PDF PDFText]{/docinitialize get exec}forall }put
PDFVars/InitAll{[PDF PDFText]{/initialize get exec}forall initgs}put
PDFVars/TermAll{[PDFText PDF]{/terminate get exec}forall}put
PDFVars begin PDF begin
PDFVars/DocInitAll get exec PDFVars/InitAll get exec

[/NamespacePush PDFMark5
[/_objdef {Metadata_In_EPS} /type /stream /OBJ PDFMark5
[{Metadata_In_EPS} 13667 (% &end XMP packet& %) ReadByPDFMark5
<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="3.1-702">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xap="http://ns.adobe.com/xap/1.0/"
            xmlns:xapGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xap:CreateDate>2010-06-24T15:36:16+02:00</xap:CreateDate>
         <xap:ModifyDate>2010-06-24T15:36:16+02:00</xap:ModifyDate>
         <xap:MetadataDate>2010-06-24T15:36:16+02:00</xap:MetadataDate>
         <xap:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xapGImg:width>256</xapGImg:width>
                  <xapGImg:height>56</xapGImg:height>
                  <xapGImg:format>JPEG</xapGImg:format>
                  <xapGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAOAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9Oa1rWl6JpV1q2q3CWmn&#xA;2aGW4uJPsqo+W5JOwA3J2GKsC8+eadD8zWOl+UNI1u90+884W7XGka3psLyRCOGjkPIvEgOAQwUg&#xA;r+1xHVVjbeY75rm885w2Pma6vvI8cmirosvGNNUY8VN2yKu/88vBD+ww6UxVoeWByuvIdrD5itbL&#xA;zmk2s3uvNcLINOuCVd7KQhmX/Ilq3Jiyj4q1CrUvnG0t7Wz/ADBvbrzLpmh+Unl0STRLiLm9/IWW&#xA;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&#xA;FXYq/wD/2Q==</xapGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xap:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xapMM:DocumentID>uuid:49C20577957FDF11A4AAF220E7D4A603</xapMM:DocumentID>
         <xapMM:InstanceID>uuid:49C20577957FDF11A4AAF220E7D4A603</xapMM:InstanceID>
         <xapMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>uuid:87759732-42d1-441f-85a0-9d9d053d1903</stRef:instanceID>
            <stRef:documentID>uuid:6693403392F2DD11A025AFCEC660F582</stRef:documentID>
         </xapMM:DerivedFrom>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xapTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xapG="http://ns.adobe.com/xap/1.0/g/">
         <xapTPg:NPages>1</xapTPg:NPages>
         <xapTPg:HasVisibleTransparency>False</xapTPg:HasVisibleTransparency>
         <xapTPg:HasVisibleOverprint>True</xapTPg:HasVisibleOverprint>
         <xapTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>800.100000</stDim:w>
            <stDim:h>200.025000</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xapTPg:MaxPageSize>
         <xapTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xapTPg:PlateNames>
         <xapTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xapG:groupName>Standard-Farbfeldgruppe</xapG:groupName>
                  <xapG:groupType>0</xapG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xapTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">LOGO2_NEU.eps</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:creator>
            <rdf:Seq>
               <rdf:li>G5 ac.cent</rdf:li>
            </rdf:Seq>
         </dc:creator>
         <dc:format>application/eps</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>

% &end XMP packet& %

[{Metadata_In_EPS} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT PDFMark5
[/Document 1 dict begin /Metadata {Metadata_In_EPS} def currentdict end /BDC PDFMark5
[/NamespacePop PDFMark5

PDFVars/TermAll get exec end end

%%EndSetup
 PDF /docinitialize get exec
PDFVars begin PDF begin PDFVars/InitAll get exec
0.0 0.0 2242.73 476.789 rectclip
/N10 [/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]
/ColorSpace defineRes pop

/N21 <~s8W,trVcZlr;-9eq>'m^q"a[Yq"FFUp%A%Np%@qKo^h\Go()DBnac2=naGu:mdKW3
mdKQ1md0<-lg4!'lg3m$lfdTukNM0nkNM'kkiLsijQ5OajQ5C]jPo4\iSrnUiSrbQ
iSNJNh;@/HhV[,EhV6iAg=tH:gYCK9gXt35f@\g.f@e^*f[SL(eCE.!eCN'se^;gp
d*gChdF6Fgda$1dc-F\[cHj\YccXJWb0/&Ob07rLbK%`J`lQ<Aa2u<?aMc'=_o9[5
`5]X2`PB@/^qmq'_8F"&_S*_#]Y;1n]t_1l^Uh(l\\#Pb]"GM_]XG>^[^WiU\%/lS
\?iTPZF%*G['m6G[BQsDYHbI;Yd:I8ZE:=8XKJe.Xg"h,YGnS*W2m&!WiW+tXJVqs
V5UDiVl?JhW2$2fU84]\USa]ZV4aQYT:r'PTVJ'MU7IpMS=ZFDSY2FAT:2:AR@Bb7
R[oe5S<fS4QC+/,Q^X/)R?No'P*D;qPEq;nQ&q/nO-,ZeOHYZbP)YNbN/j$YNKB$V
O,AmVM2RCMMN*FKN/*7JL5:_@LPgb>M1gV>K8#,5KSP/3L4Ou2J:`H(JV8N'K78?&
I=HfqIXulpJ9u]oH@10eH[^6dI<^'cGBnOYG^=OWH?FCVFEVnMFa.tLGB.bJEH?8A
Ecc8?F)Q#=DJsQ4DfKT2E,9B0CM[p(CMmj$D.m[#BPD6pBPM-lC1V!kA7fLcAS5L`
An#7]@:EeU@:W_Q@p`VQ?=.,H?=7#D?X$cB>$G<:>?tB8>Zb-5='/X,='8O(=B&:%
;cHdq;cQ[m<)HLk:f(%c:Jjk^:eaY[9MA2S92/#N9M%fK84Z?C7nH0>84H$<779U5
6Ua@/6pa4-5sRb%5=%Lt5X%=q4Zknj4$5Pa4#o8\3&`fU2)dEM2)I'F1GLX?0JP:7
0J>"1/hAS+.P!&!.Ounr.4-Dj,pjub,pji^,p=HX+<_sO+9~> 15 dict begin
/Sample exch def
currentdict end
[exch {begin
/_x0 exch def
/_tmp0 _x0
dup 1.0 ge {pop 254.0}
{dup 0.0 le {pop 0.0}
{254.0 mul 
} ifelse
} ifelse
def
/min0 _tmp0 cvi def
/max0 _tmp0 ceiling cvi def
/f0
min0 max0 eq
{{min0 f1}}
{{
[min0 f1 max0 f1
0 1 2 {dup 3 index exch get exch 2 index exch get
_tmp0 min0 max0 5 3 roll int
3 1 roll} for pop pop]
}} ifelse
def
/f1
{/prm0 exch def [
 0 254 prm0 limit 24 mul 3 {dup
-3 bitshift Sample exch get exch 8 add} repeat pop
]} def
/rnd {256 mul 0.5 add floor 256 div} def
save f0 aload pop 4 -1 roll restore
dup 255.0 ge {pop 1.0}
{dup 0.0 le {pop 0.0}
{255.0 div 
} ifelse
} ifelse
0.0 1.0 3 2 roll limit rnd
3 1 roll
dup 255.0 ge {pop 1.0}
{dup 0.0 le {pop 0.0}
{255.0 div 
} ifelse
} ifelse
0.0 1.0 3 2 roll limit rnd
3 1 roll
dup 255.0 ge {pop 1.0}
{dup 0.0 le {pop 0.0}
{255.0 div 
} ifelse
} ifelse
0.0 1.0 3 2 roll limit rnd
3 1 roll
end
} bind aload pop] cvx readonly
/Function defineRes pop

q
0.0 0.0 m
2242.73 0.0 l
2242.73 476.789 l
0.0 476.789 l
h
W
n
n
666.527 306.742 m
666.527 234.42 l
666.527 203.7 644.447 188.82 616.446 188.82 c
588.445 188.82 566.365 203.7 566.365 234.42 c
566.365 306.742 l
591.166 306.742 l
591.166 244.021 l
591.166 224.5 592.125 206.741 616.446 206.741 c
640.767 206.741 641.727 224.5 641.727 244.021 c
641.727 306.742 l
666.527 306.742 l
[/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]
/E1 exch /ColorSpace defineRes

cs 0.13725 0.12157 0.12549 sc
f
n
713.085 262.261 m
713.405 261.781 l
718.365 269.142 725.886 273.941 738.046 273.941 c
746.046 273.941 761.566 268.021 764.446 256.341 c
765.727 251.381 766.046 246.26 766.046 243.541 c
766.046 191.219 l
742.046 191.219 l
742.046 239.541 l
741.886 248.181 739.486 257.941 727.646 257.941 c
720.125 257.941 713.565 251.221 713.245 239.541 c
713.245 191.219 l
689.245 191.219 l
689.245 271.541 l
713.085 271.541 l
713.085 262.261 l
f
n
810.684 271.541 m
786.684 271.541 24.0 -80.322 re
810.684 271.541 m
h
811.484 306.742 m
785.884 306.742 25.6 -20.64 re
811.484 306.742 m
f
n
823.003 271.541 m
848.444 271.541 l
866.364 217.14 l
866.685 217.14 l
885.085 271.541 l
907.965 271.541 l
878.845 191.219 l
852.604 191.219 l
823.003 271.541 l
f
n
969.245 240.981 m
969.245 249.781 966.845 257.941 955.165 257.941 c
944.124 257.941 941.724 249.781 941.404 240.981 c
969.245 240.981 l
h
941.404 224.981 m
941.404 214.581 942.844 204.82 955.165 204.82 c
963.484 204.82 967.645 207.86 969.885 215.22 c
991.485 215.22 l
989.405 195.379 973.885 188.82 955.165 188.82 c
927.644 188.82 916.604 204.34 916.604 231.221 c
916.604 255.381 930.684 273.941 955.165 273.941 c
970.205 273.941 982.685 268.821 989.405 254.741 c
991.645 250.261 992.765 245.461 993.405 240.34 c
994.045 235.381 994.045 230.26 994.045 224.981 c
941.404 224.981 l
f
n
1029.24 271.541 m
1029.72 256.981 l
1030.04 256.981 l
1035.16 269.622 1045.4 272.822 1057.4 272.501 c
1057.4 251.221 l
1047.0 251.221 l
1043.0 250.901 1037.72 248.661 1035.32 245.301 c
1032.76 240.821 1032.28 236.34 1032.12 231.061 c
1032.12 191.219 l
1008.28 191.219 l
1008.12 255.541 l
1008.12 258.901 1007.64 265.622 1007.32 271.541 c
1029.24 271.541 l
f
n
1111.96 250.101 m
1111.64 255.541 1106.52 257.941 1101.08 257.941 c
1094.52 257.941 1091.48 256.021 1091.48 250.741 c
1091.48 238.1 1137.4 245.301 1137.4 215.22 c
1137.4 197.62 1115.96 188.82 1101.08 188.82 c
1082.36 188.82 1066.04 196.18 1065.72 214.581 c
1087.96 214.581 l
1088.44 208.34 1094.04 204.82 1101.08 204.82 c
1107.64 204.82 1112.6 207.539 1112.6 213.78 c
1112.6 220.18 1101.08 222.901 1096.28 224.02 c
1080.92 227.701 1066.68 231.061 1066.68 249.781 c
1066.68 266.581 1087.0 273.941 1101.08 273.941 c
1118.04 273.941 1132.44 267.861 1133.56 250.101 c
1111.96 250.101 l
f
n
1175.32 271.541 m
1151.32 271.541 24.0 -80.322 re
1175.32 271.541 m
h
1176.12 306.742 m
1150.52 306.742 25.6 -20.64 re
1176.12 306.742 m
f
n
1201.88 271.541 m
1201.88 287.382 l
1225.88 296.022 l
1225.88 271.541 l
1243.96 271.541 l
1243.96 255.541 l
1225.88 255.541 l
1225.88 218.26 l
1225.88 207.7 1227.48 204.82 1235.8 204.82 c
1238.36 204.82 1240.92 205.14 1243.48 205.299 c
1243.48 191.219 l
1240.76 189.94 1227.96 188.82 1224.6 188.82 c
1205.88 188.82 1201.88 198.581 1201.88 216.02 c
1201.88 255.541 l
1185.72 255.541 l
1185.72 271.541 l
1201.88 271.541 l
f
n
1311.48 271.541 m
1335.0 271.541 l
1294.68 160.659 l
1270.84 160.659 l
1281.08 191.059 l
1250.04 271.541 l
1275.64 271.541 l
1293.24 216.02 l
1293.56 216.02 l
1311.48 271.541 l
f
n
1413.52 204.82 m
1428.24 204.82 1430.64 218.581 1430.64 231.381 c
1430.64 244.181 1428.24 257.941 1413.52 257.941 c
1398.8 257.941 1396.4 244.181 1396.4 231.381 c
1396.4 218.581 1398.8 204.82 1413.52 204.82 c
h
1413.52 188.82 m
1387.28 188.82 1371.6 206.1 1371.6 231.381 c
1371.6 256.661 1387.28 273.941 1413.52 273.941 c
1439.76 273.941 1455.44 256.661 1455.44 231.381 c
1455.44 206.1 1439.76 188.82 1413.52 188.82 c
f
n
1514.96 293.142 m
1498.0 295.062 1497.68 287.382 1498.32 271.541 c
1512.88 271.541 l
1512.88 255.541 l
1498.32 255.541 l
1498.32 191.219 l
1474.32 191.219 l
1474.32 255.541 l
1462.32 255.541 l
1462.32 271.541 l
1474.32 271.541 l
1473.68 294.422 1475.76 309.143 1501.84 309.143 c
1506.16 309.143 1510.64 308.663 1514.96 308.022 c
1514.96 293.142 l
f
n
1616.04 273.782 m
1615.08 285.462 1608.84 291.222 1596.84 291.222 c
1587.72 291.222 1578.44 286.422 1578.44 276.342 c
1578.44 263.861 1589.64 262.421 1599.56 260.021 c
1617.16 255.541 1643.08 250.581 1643.08 227.38 c
1643.08 198.74 1618.12 188.82 1593.32 188.82 c
1566.92 188.82 1548.2 199.06 1549.0 228.18 c
1574.28 228.18 l
1573.32 215.38 1580.68 206.741 1593.64 206.741 c
1603.56 206.741 1616.68 209.78 1616.68 222.1 c
1616.68 235.701 1600.2 236.661 1590.28 239.221 c
1574.12 243.221 1552.04 250.581 1552.04 271.061 c
1552.04 297.462 1576.36 309.143 1600.04 309.143 c
1622.44 309.143 1639.88 296.982 1639.88 273.782 c
1616.04 273.782 l
f
n
1666.44 271.541 m
1666.44 287.382 l
1690.44 296.022 l
1690.44 271.541 l
1708.52 271.541 l
1708.52 255.541 l
1690.44 255.541 l
1690.44 218.26 l
1690.44 207.7 1692.04 204.82 1700.36 204.82 c
1702.92 204.82 1705.48 205.14 1708.04 205.299 c
1708.04 191.219 l
1705.32 189.94 1692.52 188.82 1689.16 188.82 c
1670.44 188.82 1666.44 198.581 1666.44 216.02 c
1666.44 255.541 l
1650.28 255.541 l
1650.28 271.541 l
1666.44 271.541 l
f
n
1775.08 201.14 m
1769.96 193.78 1762.44 188.82 1750.28 188.82 c
1742.28 188.82 1726.76 194.9 1723.88 206.581 c
1722.6 211.539 1722.27 216.661 1722.27 219.38 c
1722.27 271.541 l
1746.28 271.541 l
1746.28 223.38 l
1746.44 214.741 1748.84 204.82 1760.68 204.82 c
1768.2 204.82 1774.76 211.7 1775.08 223.38 c
1775.08 271.541 l
1799.08 271.541 l
1799.08 205.62 l
1799.24 200.82 1799.56 196.02 1800.04 191.219 c
1776.04 191.219 l
1775.08 201.14 l
f
n
1826.43 271.541 m
1826.43 287.382 l
1850.44 296.022 l
1850.44 271.541 l
1868.52 271.541 l
1868.52 255.541 l
1850.44 255.541 l
1850.44 218.26 l
1850.44 207.7 1852.03 204.82 1860.35 204.82 c
1862.91 204.82 1865.48 205.14 1868.03 205.299 c
1868.03 191.219 l
1865.31 189.94 1852.52 188.82 1849.15 188.82 c
1830.43 188.82 1826.43 198.581 1826.43 216.02 c
1826.43 255.541 l
1810.27 255.541 l
1810.27 271.541 l
1826.43 271.541 l
f
n
1888.67 271.541 m
1888.67 287.382 l
1912.67 296.022 l
1912.67 271.541 l
1930.75 271.541 l
1930.75 255.541 l
1912.67 255.541 l
1912.67 218.26 l
1912.67 207.7 1914.27 204.82 1922.59 204.82 c
1925.15 204.82 1927.71 205.14 1930.27 205.299 c
1930.27 191.219 l
1927.55 189.94 1914.75 188.82 1911.39 188.82 c
1892.67 188.82 1888.67 198.581 1888.67 216.02 c
1888.67 255.541 l
1872.51 255.541 l
1872.51 271.541 l
1888.67 271.541 l
f
n
1982.91 208.821 m
1996.03 208.821 1998.43 222.26 1998.43 232.661 c
1998.43 244.5 1996.03 257.941 1982.91 257.941 c
1969.79 257.941 1967.39 244.5 1967.39 232.661 c
1967.39 222.26 1969.79 208.821 1982.91 208.821 c
h
2022.43 198.42 m
2022.43 179.7 2018.27 159.219 1983.07 159.539 c
1965.31 159.539 1946.27 163.859 1945.79 185.459 c
1968.51 185.459 l
1968.83 178.259 1975.23 175.539 1981.79 175.539 c
2000.03 175.539 1999.39 192.18 1998.43 203.86 c
1998.11 203.86 l
1993.15 196.02 1984.67 192.82 1975.55 192.82 c
1953.79 192.82 1942.59 213.3 1942.59 232.821 c
1942.59 253.301 1954.27 273.941 1976.67 273.941 c
1987.39 273.941 1994.27 270.421 1998.11 262.261 c
1998.43 262.261 l
1998.43 271.541 l
2022.43 271.541 l
2022.43 198.42 l
f
n
2061.95 216.34 m
2061.95 209.62 2066.91 204.82 2073.63 204.82 c
2086.91 204.82 2087.39 219.54 2087.39 228.981 c
2079.07 229.141 2061.95 229.301 2061.95 216.34 c
h
2042.59 248.821 m
2042.75 258.901 2047.07 265.142 2053.47 268.821 c
2060.03 272.662 2068.51 273.941 2077.15 273.941 c
2093.31 273.941 2111.39 268.021 2111.39 243.861 c
2111.39 200.02 l
2111.55 196.02 2112.19 193.62 2112.51 191.219 c
2090.91 191.219 l
2090.43 194.9 2090.11 198.581 2090.11 201.94 c
2089.79 201.94 l
2084.35 192.66 2076.03 188.82 2065.15 188.82 c
2050.11 188.82 2038.91 197.459 2038.91 213.14 c
2038.91 218.741 2041.47 232.34 2056.03 238.581 c
2065.63 242.741 2077.79 243.221 2087.39 242.901 c
2087.39 250.421 l
2087.39 253.781 2084.83 260.341 2076.35 260.341 c
2068.03 260.341 2065.31 252.501 2065.63 248.821 c
2042.59 248.821 l
f
n
2151.71 271.541 m
2152.19 256.981 l
2152.51 256.981 l
2157.63 269.622 2167.87 272.822 2179.87 272.501 c
2179.87 251.221 l
2169.47 251.221 l
2165.47 250.901 2160.19 248.661 2157.79 245.301 c
2155.23 240.821 2154.75 236.34 2154.59 231.061 c
2154.59 191.219 l
2130.75 191.219 l
2130.59 255.541 l
2130.59 258.901 2130.11 265.622 2129.79 271.541 c
2151.71 271.541 l
f
q
n
0.060059 476.76 2242.67 -476.76 re
W
n
n
2200.65 271.541 m
2200.65 287.382 l
2224.65 296.022 l
2224.65 271.541 l
2242.73 271.541 l
2242.73 255.541 l
2224.65 255.541 l
2224.65 218.26 l
2224.65 207.7 2226.25 204.82 2234.57 204.82 c
2237.13 204.82 2239.69 205.14 2242.25 205.299 c
2242.25 191.219 l
2239.53 189.94 2226.73 188.82 2223.37 188.82 c
2204.65 188.82 2200.65 198.581 2200.65 216.02 c
2200.65 255.541 l
2184.49 255.541 l
2184.49 271.541 l
2200.65 271.541 l
f
n
193.249 268.657 m
208.131 283.539 l
223.013 268.657 l
208.131 253.775 l
193.249 268.657 l
h
230.499 268.657 m
245.381 283.539 l
260.263 268.657 l
245.381 253.775 l
230.499 268.657 l
h
212.499 289.157 m
227.381 304.039 l
242.263 289.157 l
227.381 274.275 l
212.499 289.157 l
h
250.499 288.157 m
265.381 303.039 l
280.263 288.157 l
265.381 273.275 l
250.499 288.157 l
h
173.749 288.157 m
188.631 303.039 l
203.513 288.157 l
188.631 273.275 l
173.749 288.157 l
h
212.499 337.657 m
227.381 352.539 l
242.263 337.657 l
227.381 322.775 l
212.499 337.657 l
h
192.249 311.907 m
207.131 326.789 l
222.013 311.907 l
207.131 297.025 l
192.249 311.907 l
h
231.499 311.907 m
246.381 326.789 l
261.263 311.907 l
246.381 297.025 l
231.499 311.907 l
h
252.499 336.157 m
267.381 351.039 l
282.263 336.157 l
267.381 321.275 l
252.499 336.157 l
h
171.749 336.157 m
186.631 351.039 l
201.513 336.157 l
186.631 321.275 l
171.749 336.157 l
h
190.249 364.907 m
205.131 379.789 l
220.013 364.907 l
205.131 350.025 l
190.249 364.907 l
h
233.499 364.907 m
248.381 379.789 l
263.263 364.907 l
248.381 350.025 l
233.499 364.907 l
h
212.499 395.157 m
227.381 410.039 l
242.263 395.157 l
227.381 380.275 l
212.499 395.157 l
h
256.499 393.407 m
271.381 408.289 l
286.263 393.407 l
271.381 378.525 l
256.499 393.407 l
h
167.749 393.407 m
182.631 408.289 l
197.513 393.407 l
182.631 378.525 l
167.749 393.407 l
h
189.249 426.907 m
204.131 441.789 l
219.013 426.907 l
204.131 412.025 l
189.249 426.907 l
h
234.499 426.907 m
249.381 441.789 l
264.263 426.907 l
249.381 412.025 l
234.499 426.907 l
h
212.499 461.907 m
227.381 476.789 l
242.263 461.907 l
227.381 447.025 l
212.499 461.907 l
h
259.499 459.657 m
274.381 474.539 l
289.263 459.657 l
274.381 444.775 l
259.499 459.657 l
h
164.749 459.657 m
179.631 474.539 l
194.513 459.657 l
179.631 444.775 l
164.749 459.657 l
h
271.499 309.157 m
286.381 324.039 l
301.263 309.157 l
286.381 294.275 l
271.499 309.157 l
h
152.749 309.157 m
167.631 324.039 l
182.513 309.157 l
167.631 294.275 l
152.749 309.157 l
h
275.499 361.657 m
290.381 376.539 l
305.263 361.657 l
290.381 346.775 l
275.499 361.657 l
h
148.749 361.657 m
163.631 376.539 l
178.513 361.657 l
163.631 346.775 l
148.749 361.657 l
h
280.499 423.907 m
295.381 438.789 l
310.263 423.907 l
295.381 409.025 l
280.499 423.907 l
h
143.749 423.907 m
158.631 438.789 l
173.513 423.907 l
158.631 409.025 l
143.749 423.907 l
h
294.499 331.407 m
309.381 346.289 l
324.263 331.407 l
309.381 316.525 l
294.499 331.407 l
h
129.749 331.407 m
144.631 346.289 l
159.513 331.407 l
144.631 316.525 l
129.749 331.407 l
h
300.499 388.907 m
315.381 403.789 l
330.263 388.907 l
315.381 374.025 l
300.499 388.907 l
h
123.749 388.907 m
138.631 403.789 l
153.513 388.907 l
138.631 374.025 l
123.749 388.907 l
h
306.499 456.157 m
321.381 471.039 l
336.263 456.157 l
321.381 441.275 l
306.499 456.157 l
h
118.749 456.157 m
133.631 471.039 l
148.513 456.157 l
133.631 441.275 l
118.749 456.157 l
h
318.499 356.407 m
333.381 371.289 l
348.263 356.407 l
333.381 341.525 l
318.499 356.407 l
h
105.749 356.407 m
120.631 371.289 l
135.513 356.407 l
120.631 341.525 l
105.749 356.407 l
h
326.499 418.907 m
341.381 433.789 l
356.263 418.907 l
341.381 404.025 l
326.499 418.907 l
h
97.749 418.907 m
112.631 433.789 l
127.513 418.907 l
112.631 404.025 l
97.749 418.907 l
h
344.499 381.407 m
359.381 396.289 l
374.263 381.407 l
359.381 366.525 l
344.499 381.407 l
h
79.749 381.407 m
94.631 396.289 l
109.513 381.407 l
94.631 366.525 l
79.749 381.407 l
h
372.499 409.907 m
387.381 424.789 l
402.263 409.907 l
387.381 395.025 l
372.499 409.907 l
h
53.749 409.907 m
68.631 424.789 l
83.513 409.907 l
68.631 395.025 l
53.749 409.907 l
h
193.249 230.914 m
208.131 216.032 l
223.013 230.914 l
208.131 245.795 l
193.249 230.914 l
h
230.499 230.914 m
245.381 216.032 l
260.263 230.914 l
245.381 245.795 l
230.499 230.914 l
h
212.499 210.414 m
227.381 195.532 l
242.263 210.414 l
227.381 225.295 l
212.499 210.414 l
h
250.499 211.414 m
265.381 196.532 l
280.263 211.414 l
265.381 226.295 l
250.499 211.414 l
h
173.749 211.414 m
188.631 196.532 l
203.513 211.414 l
188.631 226.295 l
173.749 211.414 l
h
212.499 161.914 m
227.381 147.032 l
242.263 161.914 l
227.381 176.795 l
212.499 161.914 l
h
192.249 187.664 m
207.131 172.782 l
222.013 187.664 l
207.131 202.545 l
192.249 187.664 l
h
231.499 187.664 m
246.381 172.782 l
261.263 187.664 l
246.381 202.545 l
231.499 187.664 l
h
252.499 163.414 m
267.381 148.532 l
282.263 163.414 l
267.381 178.295 l
252.499 163.414 l
h
171.749 163.414 m
186.631 148.532 l
201.513 163.414 l
186.631 178.295 l
171.749 163.414 l
h
190.249 134.664 m
205.131 119.782 l
220.013 134.664 l
205.131 149.545 l
190.249 134.664 l
h
233.499 134.664 m
248.381 119.782 l
263.263 134.664 l
248.381 149.545 l
233.499 134.664 l
h
212.499 104.414 m
227.381 89.532 l
242.263 104.414 l
227.381 119.295 l
212.499 104.414 l
h
256.499 106.164 m
271.381 91.282 l
286.263 106.164 l
271.381 121.045 l
256.499 106.164 l
h
167.749 106.164 m
182.631 91.282 l
197.513 106.164 l
182.631 121.045 l
167.749 106.164 l
h
189.249 72.664 m
204.131 57.782 l
219.013 72.664 l
204.131 87.545 l
189.249 72.664 l
h
234.499 72.664 m
249.381 57.782 l
264.263 72.664 l
249.381 87.545 l
234.499 72.664 l
h
212.499 37.664 m
227.381 22.782 l
242.263 37.664 l
227.381 52.545 l
212.499 37.664 l
h
259.499 39.914 m
274.381 25.032 l
289.263 39.914 l
274.381 54.795 l
259.499 39.914 l
h
164.749 39.914 m
179.631 25.032 l
194.513 39.914 l
179.631 54.795 l
164.749 39.914 l
h
271.499 190.414 m
286.381 175.532 l
301.263 190.414 l
286.381 205.295 l
271.499 190.414 l
h
152.749 190.414 m
167.631 175.532 l
182.513 190.414 l
167.631 205.295 l
152.749 190.414 l
h
275.499 137.914 m
290.381 123.032 l
305.263 137.914 l
290.381 152.795 l
275.499 137.914 l
h
148.749 137.914 m
163.631 123.032 l
178.513 137.914 l
163.631 152.795 l
148.749 137.914 l
h
280.499 75.664 m
295.381 60.782 l
310.263 75.664 l
295.381 90.545 l
280.499 75.664 l
h
143.749 75.664 m
158.631 60.782 l
173.513 75.664 l
158.631 90.545 l
143.749 75.664 l
h
294.499 168.164 m
309.381 153.282 l
324.263 168.164 l
309.381 183.045 l
294.499 168.164 l
h
129.749 168.164 m
144.631 153.282 l
159.513 168.164 l
144.631 183.045 l
129.749 168.164 l
h
300.499 110.664 m
315.381 95.782 l
330.263 110.664 l
315.381 125.545 l
300.499 110.664 l
h
123.749 110.664 m
138.631 95.782 l
153.513 110.664 l
138.631 125.545 l
123.749 110.664 l
h
306.499 43.414 m
321.381 28.532 l
336.263 43.414 l
321.381 58.295 l
306.499 43.414 l
h
118.749 43.414 m
133.631 28.532 l
148.513 43.414 l
133.631 58.295 l
118.749 43.414 l
h
318.499 143.164 m
333.381 128.282 l
348.263 143.164 l
333.381 158.045 l
318.499 143.164 l
h
105.749 143.164 m
120.631 128.282 l
135.513 143.164 l
120.631 158.045 l
105.749 143.164 l
h
326.499 80.664 m
341.381 65.782 l
356.263 80.664 l
341.381 95.545 l
326.499 80.664 l
h
97.749 80.664 m
112.631 65.782 l
127.513 80.664 l
112.631 95.545 l
97.749 80.664 l
h
344.499 118.164 m
359.381 103.282 l
374.263 118.164 l
359.381 133.045 l
344.499 118.164 l
h
79.749 118.164 m
94.631 103.282 l
109.513 118.164 l
94.631 133.045 l
79.749 118.164 l
h
372.499 89.664 m
387.381 74.782 l
402.263 89.664 l
387.381 104.545 l
372.499 89.664 l
h
53.749 89.664 m
68.631 74.782 l
83.513 89.664 l
68.631 104.545 l
53.749 89.664 l
h
187.632 235.286 m
172.75 250.167 l
187.632 265.049 l
202.514 250.167 l
187.632 235.286 l
h
139.132 235.286 m
124.25 250.167 l
139.132 265.049 l
154.014 250.167 l
139.132 235.286 l
h
164.882 215.036 m
150.0 229.916 l
164.882 244.799 l
179.764 229.916 l
164.882 215.036 l
h
164.882 254.286 m
150.0 269.167 l
164.882 284.049 l
179.764 269.167 l
164.882 254.286 l
h
140.632 275.286 m
125.75 290.167 l
140.632 305.049 l
155.514 290.167 l
140.632 275.286 l
h
140.632 194.536 m
125.75 209.416 l
140.632 224.299 l
155.514 209.416 l
140.632 194.536 l
h
111.882 213.036 m
97.0 227.916 l
111.882 242.799 l
126.764 227.916 l
111.882 213.036 l
h
111.882 256.286 m
97.0 271.167 l
111.882 286.049 l
126.764 271.167 l
111.882 256.286 l
h
81.632 235.286 m
66.75 250.167 l
81.632 265.049 l
96.514 250.167 l
81.632 235.286 l
h
83.382 279.286 m
68.5 294.167 l
83.382 309.049 l
98.264 294.167 l
83.382 279.286 l
h
83.382 190.536 m
68.5 205.416 l
83.382 220.298 l
98.264 205.416 l
83.382 190.536 l
h
49.882 212.036 m
35.0 226.916 l
49.882 241.799 l
64.764 226.916 l
49.882 212.036 l
h
49.882 257.286 m
35.0 272.167 l
49.882 287.049 l
64.764 272.167 l
49.882 257.286 l
h
14.882 235.286 m
0.0 250.167 l
14.882 265.049 l
29.764 250.167 l
14.882 235.286 l
h
17.132 282.286 m
2.25 297.167 l
17.132 312.049 l
32.014 297.167 l
17.132 282.286 l
h
17.132 187.536 m
2.25 202.416 l
17.132 217.298 l
32.014 202.416 l
17.132 187.536 l
h
115.132 298.286 m
100.25 313.167 l
115.132 328.049 l
130.014 313.167 l
115.132 298.286 l
h
115.132 171.536 m
100.25 186.416 l
115.132 201.298 l
130.014 186.416 l
115.132 171.536 l
h
52.882 303.286 m
38.0 318.167 l
52.882 333.049 l
67.764 318.167 l
52.882 303.286 l
h
52.882 166.536 m
38.0 181.416 l
52.882 196.298 l
67.764 181.416 l
52.882 166.536 l
h
87.882 323.286 m
73.0 338.167 l
87.882 353.049 l
102.764 338.167 l
87.882 323.286 l
h
87.882 146.536 m
73.0 161.416 l
87.882 176.298 l
102.764 161.416 l
87.882 146.536 l
h
20.632 329.286 m
5.7501 344.167 l
20.632 359.049 l
35.514 344.167 l
20.632 329.286 l
h
20.632 141.536 m
5.7501 156.416 l
20.632 171.298 l
35.514 156.416 l
20.632 141.536 l
h
57.882 349.286 m
43.0 364.167 l
57.882 379.049 l
72.764 364.167 l
57.882 349.286 l
h
57.882 120.536 m
43.0 135.416 l
57.882 150.298 l
72.764 135.416 l
57.882 120.536 l
h
266.375 235.286 m
281.257 250.167 l
266.375 265.049 l
251.494 250.167 l
266.375 235.286 l
h
314.875 235.286 m
329.757 250.167 l
314.875 265.049 l
299.994 250.167 l
314.875 235.286 l
h
289.125 215.036 m
304.007 229.916 l
289.125 244.799 l
274.244 229.916 l
289.125 215.036 l
h
289.125 254.286 m
304.007 269.167 l
289.125 284.049 l
274.244 269.167 l
289.125 254.286 l
h
313.375 275.286 m
328.257 290.167 l
313.375 305.049 l
298.494 290.167 l
313.375 275.286 l
h
313.375 194.536 m
328.257 209.416 l
313.375 224.299 l
298.494 209.416 l
313.375 194.536 l
h
342.125 213.036 m
357.007 227.916 l
342.125 242.799 l
327.244 227.916 l
342.125 213.036 l
h
342.125 256.286 m
357.007 271.167 l
342.125 286.049 l
327.244 271.167 l
342.125 256.286 l
h
372.375 235.286 m
387.257 250.167 l
372.375 265.049 l
357.494 250.167 l
372.375 235.286 l
h
370.625 279.286 m
385.507 294.167 l
370.625 309.049 l
355.744 294.167 l
370.625 279.286 l
h
370.625 190.536 m
385.507 205.416 l
370.625 220.298 l
355.744 205.416 l
370.625 190.536 l
h
404.125 212.036 m
419.007 226.916 l
404.125 241.799 l
389.244 226.916 l
404.125 212.036 l
h
404.125 257.286 m
419.007 272.167 l
404.125 287.049 l
389.244 272.167 l
404.125 257.286 l
h
439.125 235.286 m
454.007 250.167 l
439.125 265.049 l
424.244 250.167 l
439.125 235.286 l
h
436.875 282.286 m
451.757 297.167 l
436.875 312.049 l
421.994 297.167 l
436.875 282.286 l
h
436.875 187.536 m
451.757 202.416 l
436.875 217.298 l
421.994 202.416 l
436.875 187.536 l
h
338.875 298.286 m
353.757 313.167 l
338.875 328.049 l
323.994 313.167 l
338.875 298.286 l
h
338.875 171.536 m
353.757 186.416 l
338.875 201.298 l
323.994 186.416 l
338.875 171.536 l
h
401.125 303.286 m
416.007 318.167 l
401.125 333.049 l
386.244 318.167 l
401.125 303.286 l
h
401.125 166.536 m
416.007 181.416 l
401.125 196.298 l
386.244 181.416 l
401.125 166.536 l
h
366.125 323.286 m
381.007 338.167 l
366.125 353.049 l
351.244 338.167 l
366.125 323.286 l
h
366.125 146.536 m
381.007 161.416 l
366.125 176.298 l
351.244 161.416 l
366.125 146.536 l
h
433.375 329.286 m
448.257 344.167 l
433.375 359.049 l
418.494 344.167 l
433.375 329.286 l
h
433.375 141.536 m
448.257 156.416 l
433.375 171.298 l
418.494 156.416 l
433.375 141.536 l
h
396.125 349.286 m
411.007 364.167 l
396.125 379.049 l
381.244 364.167 l
396.125 349.286 l
h
396.125 120.536 m
411.007 135.416 l
396.125 150.298 l
381.244 135.416 l
396.125 120.536 l
h
212.499 250.157 m
227.381 265.039 l
242.263 250.157 l
227.381 235.276 l
212.499 250.157 l
eofill
Q
n
639.547 88.077 m
638.828 104.756 622.628 111.476 607.989 111.476 c
593.229 111.476 580.51 106.197 572.95 92.997 c
568.51 85.197 565.51 75.357 565.51 66.358 c
565.51 54.119 568.87 39.598 578.47 31.199 c
587.949 22.799 597.909 21.24 610.148 21.24 c
619.988 21.24 629.948 23.28 639.907 26.28 c
639.907 69.118 l
608.229 69.118 l
608.229 58.798 l
627.908 58.798 l
627.908 34.319 l
622.388 32.519 616.508 31.559 610.628 31.559 c
585.79 32.039 579.07 44.159 578.11 66.358 c
577.63 82.557 585.31 101.156 606.549 101.156 c
615.789 101.156 624.788 98.397 626.948 88.077 c
639.547 88.077 l
true setoverprint
[/Separation (Black) /E1 /ColorSpace findRes /N21 /Function findRes ] cs 1.0 sc
eofill
n
668.802 58.918 m
668.802 68.757 674.442 76.797 683.922 76.797 c
694.961 76.797 699.521 68.997 699.281 58.918 c
668.802 58.918 l
h
711.281 50.998 m
711.281 56.638 l
711.281 73.318 702.761 84.717 684.762 85.077 c
665.683 85.077 656.803 70.318 656.803 52.678 c
656.803 34.918 664.482 21.24 683.802 21.24 c
698.202 21.24 708.761 28.079 710.561 41.759 c
698.561 41.759 l
697.241 32.998 692.801 29.519 683.922 29.519 c
672.282 29.519 667.962 40.439 668.802 50.998 c
711.281 50.998 l
eofill
n
739.949 52.918 m
739.949 65.637 742.469 73.318 756.869 73.797 c
758.429 73.797 760.229 73.797 761.789 73.198 c
761.789 83.997 l
760.469 83.997 759.269 84.118 757.829 84.118 c
749.549 84.118 741.87 79.917 740.189 71.637 c
739.949 71.637 l
739.949 83.277 l
728.55 83.277 l
728.55 23.039 l
739.949 23.039 l
739.949 52.918 l
eofill
n
785.752 83.277 m
774.592 83.277 l
774.592 23.039 l
785.992 23.039 l
785.992 53.997 l
785.992 55.438 785.512 63.358 786.832 66.477 c
790.312 74.518 797.032 76.318 801.711 76.318 c
812.631 76.318 815.031 69.118 815.031 58.678 c
815.031 23.039 l
826.43 23.039 l
826.43 53.997 l
826.43 55.438 826.07 61.438 827.63 66.957 c
829.791 74.398 837.47 76.318 840.95 76.318 c
854.27 76.318 855.469 66.957 855.469 58.678 c
855.469 23.039 l
866.869 23.039 l
866.869 65.518 l
866.869 76.318 858.349 85.077 844.43 85.077 c
835.55 85.077 828.71 81.237 824.39 73.797 c
821.271 81.237 814.551 85.077 803.151 85.077 c
797.032 85.077 789.592 82.198 785.992 74.637 c
785.752 74.637 l
785.752 83.277 l
eofill
n
912.928 60.238 m
898.648 60.238 883.649 55.319 883.649 38.399 c
883.649 26.639 894.208 21.24 904.648 21.24 c
912.928 21.24 919.647 24.48 923.367 32.039 c
923.607 32.039 l
923.727 29.28 923.967 26.639 924.207 23.879 c
924.327 22.44 926.367 23.039 927.447 23.039 c
935.126 23.039 l
934.767 28.079 934.647 33.119 934.647 35.759 c
934.647 64.557 l
934.647 81.357 922.407 85.077 910.048 85.077 c
898.168 85.077 887.849 80.397 887.249 67.198 c
899.248 67.198 l
899.368 73.438 904.768 76.797 910.528 76.797 c
922.647 76.797 923.247 70.677 923.247 60.238 c
912.928 60.238 l
h
923.247 52.319 m
923.487 41.159 920.967 29.519 907.528 29.519 c
900.808 29.519 895.648 33.24 895.648 40.678 c
895.648 49.439 904.888 51.958 911.848 52.319 c
923.247 52.319 l
eofill
n
965.956 83.277 m
954.796 83.277 l
954.796 23.039 l
966.195 23.039 l
966.195 55.798 l
966.195 67.557 969.315 70.198 970.995 71.877 c
975.795 76.677 982.035 76.318 982.035 76.318 c
991.634 76.318 995.834 70.917 995.834 60.957 c
995.834 23.039 l
1007.23 23.039 l
1007.23 64.677 l
1007.23 83.997 988.634 85.077 984.435 85.077 c
978.435 85.077 970.035 81.956 966.195 74.398 c
965.956 74.398 l
965.956 83.277 l
eofill
n
1082.18 83.277 m
1069.94 83.277 l
1050.74 35.759 l
1031.91 83.277 l
1019.19 83.277 l
1044.27 23.28 l
1035.15 0.0 l
1046.78 0.0 l
1082.18 83.277 l
eofill
Q
[/EMC PDFMark5
PDFVars/TermAll get exec end end
%%PageTrailer
%%Trailer
%%EOF
